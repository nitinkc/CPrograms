/*
 * Parent_Read_From_Child.c
 *
 *  Created on: Sep 23, 2013
 *      Author: nitin
 */


//Parent receiving data from Child
#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>

#define READ_END 0
#define WRITE_END 1

int var =0;
int main(void){
	int pipe1[2], status;
	pid_t child1;

	//creating the pipe
	if(pipe(pipe1) == -1){
		fprintf(stderr,"Pipe Failed");
		return 1;
	}

	//fork a child process
	child1 = fork();

	//if error occured
	if(child1 < 0){
		fprintf(stderr,"Child1 creation failed");
		return 1;
	}

	//Parent Process
	if(child1 > 0){
		printf("\nInside Parent after forking\n");
		printf("Parent process and pid is: %d\n",getpid());
		//wait(&status); //let the child process run first;
		sleep(1);
		close(pipe1[WRITE_END]);
		printf("CHECK IF PARENT COMES TO THIS POINT\n");
		printf("Parent id %d received %d value from child\n",getpid(), var);
		read(pipe1[READ_END],&var,sizeof(var));
		close(pipe1[READ_END]);
	}

	//Child Process
	else{
		close(pipe1[READ_END]);
		var = rand()%1000;
		write(pipe1[WRITE_END],&var, sizeof(var));
printf("The Random number is %d", var);		
//close(pipe1[WRITE_END]);
		//printf("Child %d has var %d from Parent %d\n", getpid(),var, getppid());
		//_exit(0);
	}
return 0;
}

